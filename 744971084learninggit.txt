--global配置会使本机上的所有版本库都用相同的配置 如用户名和邮箱
所有版本控制软件只能跟踪文本文件格式，无法跟踪二进制的格式，word属于二进制格式，无法跟踪
文本文件编码建议使用UTF-8标准
windows自带记事本有在文件头添加0xefbbbf的功能，不建议使用，建议使用notepad++ 默认编码 UTF-8 without ROM
提交的时候添加注释直接通过git commit -m
commit一次提交很多文件，add则不一定
git log 可以查看每次提交时的记录
git log --pretty=oneline 可以把log和哈希值放在一行，比价紧凑
git 哈希值类似于svn的版本号，后者是递增的
HEAD表示当前版本号，上一个版本就是HEAD^ 上上一个就是HEAD^^ 也可以写出数字HEAD~100
回退以后如果想要恢复，就找到要回退的版本的哈希值用git reset --hard xxxx
如果找不到了想好恢复的版本的哈希值，那就用git reflog来查看每一次提交的命令
HEAD其实就是相当于一个指针，可以指向任何分支，任何版本？？
git add 是吧文件存到暂存区 git commit其实就是把暂存区的文件存到当前分支
git checkout 就是让工作区回到和最近一次add或者commit一致的状态 后面需要添加-- file 如果没有就变成了切换到另一个分支的命令
git reset HEAD file 可以把暂存区的修改撤销掉
要想把代码提交到github需要生成ssh key并在github上面添加 $ ssh-keygen -t rsa -C "youremail@example.com"
可以通过git remote add origin https://github.com/zhjc2014/leargit.git 关联远程库 每次都要输入口令 麻烦 可以用git://
git push -u origin master可以把本地master分支推送到远程库，之后就可以直接用git push origin master了
git remote rm origin 删除origin，避免冲突
git clone https://...可以克隆远程库
git checkout -b branchname 可以创建并切换到分支
git checkout master可以切换回主分支
在主分支下面调用git merge branchname可以合并分支
git branch -d branchname可以删除分支
git branch可以查看当前分支
当merge有冲突的时候要手动修改，然后再add commit 
git log --graph --pretty=oneline --abbrev-commit 可以看到冲突合并的过程
带--no-ff参数的merge合并后的历史有分支，能看出来有合并，二fast forward合并就看不出来曾经做过合并
git stash 可以保存当前修改，然后清空工作区，然后去做别的，完成后再来恢复
git stash list可以看到当前存储的数据，可以通过git stash apply stash@{0}或者git stash pop来回复工作区
git branch -D branchname 可以强制销毁未合并的分支
git push origin <name> 可以决定往远程库里面推送什么分支 可以是master可以是branch
git checkout -b <branchname> origin/<branchname> 可以是本地分支track远程库里面的分支
多人合作的时候通过git push origin branchname提交修改，如果失败，就git pull 试图合并，如果无法pull 就git branch --track branchname origin/branchname，pull以后有冲突再手动解决，然后add commit
git remote -v可以查看远程信息
tag其实就是只想某个提交的指针，直接用git tag v1.0就可以打标签 git tag可以查看标签，git tag v0.9 <哈希值> 可以对指定提交打标签
git show v1.0可以查看提交的信息
git tag -a v0.1 -m "xxxx" <哈希值> 可以指定tag信息 -a参数换成-s参数可以启用PGP签名
git tag -d v0.1 可以删除某个标签
git push origin v1.0可以推送标签到远程
git push origin --tags可以推送所有标签到远程
git push origin :refs/tags/v0.1 可以删除远程库里面的tag
可以fork任何开源代码，然后通过pull request发送给源库，贡献自己的代码